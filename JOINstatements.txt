1. How do you find related data held in two separate data tables?
	Using a JOIN clause; this combines two tables into one.

2. Explain, in your own words, the difference between an INNER JOIN, LEFT OUTER JOIN, and RIGHT OUTER JOIN. Give a real-world example for each.
	INNER JOIN - default; produces one new row in our results table for each common row between our query tables.
		Real world example : let's say we have an animal shelter and want to return all dogs who have been adopted and their owner's contact information (dogs would be in a database called dogs, owners AND donor info would be in a customer database).  Using inner join, it will only return dogs who have a matching owner.
	LEFT OUTER JOIN - produces one new row for everything from our left table and only corresponding rows from our right table.
		Real world example: using our animal shelter example, say we want to return all dogs, even those who haven't been adopted.
	RIGHT OUTER JOIN - same as left outer join, but reversed.
		Real world example: sticking with our animal shelter example, this would return everyone in our customer database, even if they are just a donor who was not linked to a dog.

3. A primary key is a unique identifier that exists only once in an entire table.  A foreign key is a non-unique value in another table.  Let's take our example for an animal shelter from before and say that in our dog database we will have dog name, breed, and customer ID.  In our customer database we will have our customer ID, name, contact info.  Our customer ID would be our primary key in our customer database and a foreign key in our dog database.

4. Aliasing is the technique of shortening variable names (typically to a single letter), to replace the table name in a query.

5. Change this query so that you are using aliasing:
	SELECT professor.name, compensation.salary,
	compensation.vacation_days FROM professor JOIN
	compensation ON professor.id =
	compensation.professor_id;

	Rewritten as:
	SELECT p.name, c.salary,
	FROM professor AS p
	JOIN compensation as c
	on p.id = c.professor_id;

6. We use NATURAL JOIN as a shorthand instead of using USING.  In our animal shelter example, this would ensure that the customer ID is only appearing once without having to create a lsit of shared columns.

7. Using this Employee schema and data, write queries to find the following information:
		List all employees and all shifts.

		SELECT employees.name, shifts.date, shifts.start_time, shifts.end_time
		FROM scheduled_shifts
		INNER JOIN employees
		ON employees.id = scheduled_shifts.employee_id
		INNER JOIN shifts
		ON shifts.id = scheduled_shifts.shift_id


8.	Using this Adoption schema and data, please write queries to retrieve the following information and include the results:

	Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.
		SELECT first_name, last_name, dogs.name
		FROM volunteers
		LEFT OUTER JOIN dogs
		ON dogs.id = volunteers.foster_dog_id;

| first_name | last_name  | name      |
| ---------- | ---------- | --------- |
| Rubeus     | Hagrid     | Munchkin  |
| Marjorie   | Dursley    | Marmaduke |
| Sirius     | Black      |           |
| Remus      | Lupin      |           |
| Albus      | Dumbledore |           |


	The cat's name, adopter's name, and adopted date for each cat adopted within the past month to be displayed as part of the "Happy Tail" social media promotion which posts recent successful adoptions.

		    SELECT cats.name, adopters.first_name, adopters.last_name, cat_adoptions.date
		    FROM cat_adoptions
		    INNER JOIN cats
		    ON cats.id = cat_adoptions.cat_id
		    INNER JOIN adopters
		    ON adopters.id = cat_adoptions.adopter_id
		    GROUP BY cats.name, adopters.first_name, adopters.last_name, cat_adoptions.date
		    HAVING cat_adoptions.date >= current_date - 30;

		| name     | first_name | last_name | date                     |
		| -------- | ---------- | --------- | ------------------------ |
		| Mushi    | Arabella   | Figg      | 2019-07-04T00:00:00.000Z |
		| Victoire | Argus      | Filch     | 2019-07-09T00:00:00.000Z |



	Create a list of adopters who have not yet chosen a dog to adopt.

		    SELECT first_name, last_name, dogs.name
		    FROM volunteers
		    LEFT JOIN dogs
		    ON dogs.id = volunteers.foster_dog_id
		    WHERE volunteers.foster_dog_id IS NULL;

		| first_name | last_name  | name |
		| ---------- | ---------- | ---- |
		| Sirius     | Black      |      |
		| Remus      | Lupin      |      |
		| Albus      | Dumbledore |      |


	Lists of all cats and all dogs who have not been adopted.

		    SELECT name
		    FROM dogs
		    LEFT JOIN dog_adoptions
		    ON dogs.id = dog_adoptions.dog_id
		    WHERE dog_adoptions.dog_id IS NULL;

		    SELECT name
		    FROM cats
		    LEFT JOIN cat_adoptions
		    ON cats.id = cat_adoptions.cat_id
		    WHERE cat_adoptions.cat_id IS NULL;

		| name      |
		| --------- |
		| Boujee    |
		| Munchkin  |
		| Marley    |
		| Lassie    |
		| Marmaduke |

		| name     |
		| -------- |
		| Seashell |
		| Nala     |


	The name of the person who adopted Rosco.

		    SELECT first_name, last_name
		    FROM adopters
		    INNER JOIN dog_adoptions
		    ON adopters.id = dog_adoptions.adopter_id
		    WHERE dog_adoptions.dog_id = 10007;

		| first_name | last_name |
		| ---------- | --------- |
		| Argus      | Filch     |


9. Using this Library schema and data, write queries applying the following scenarios and include the results:

	To determine if the library should buy more copies of a given book, please provide the names and position, in order, of all of the patrons with a hold (request for a book with all copies checked out) on "Advanced Potion-Making".

		    SELECT patrons.name, holds.rank
		    FROM holds
		    INNER JOIN patrons
		    ON holds.patron_id = patrons.id
		    WHERE holds.isbn = '9136884926'
		    ORDER BY holds.rank;

		| name           | rank |
		| -------------- | ---- |
		| Terry Boot     | 1    |
		| Cedric Diggory | 2    |


	List all of the library patrons. If they have one or more books checked out, list the books with the patrons.


		    SELECT patrons.name,
		    MAX((CASE WHEN books.title IN (SELECT title FROM books WHERE transactions.checked_in_date IS NULL) THEN books.title ELSE NULL END))
		    FROM patrons
		    INNER JOIN transactions ON transactions.patron_id = patrons.id
		    INNER JOIN books ON books.isbn = transactions.isbn
		    GROUP BY patrons.name;

		| name             | max                                     |
		| ---------------- | --------------------------------------- |
		| Cedric Diggory   | Fantastic Beasts and Where to Find Them |
		| Cho Chang        |                                         |
		| Hermione Granger |                                         |
		| Padma Patil      |                                         |
		| Terry Boot       | Advanced Potion-Making                  |

		---
